                                           *** Bevis av algoritmens riktighet ***
                                                        
                                                        
                                                      ** FÖRVILLKOR ** 
          _________________________________________________________________________________________________________________
          Det gäller att X = {x1,x2,...,xn} , där n är ett godtyckligt naturligt n >= 1
          
          Det finns något element i mängden X av godtyckligt index i, sådant att  1 <= i <= n. Xi betecknar det element
          som finns på positionen i.
          ________________________________________________________________________________________________________________
          
                                                    
                                                    ** EFTERVILLKOR ** 
          _________________________________________________________________________________________________________________
          X är en sorterad mängd med minsta element på index i = 0.
          Det gäller alltså att x1 < x2 < ... xn
          
          _________________________________________________________________________________________________________________
          
                                                     
                                                     ** INRELOOPEN ** 
          _________________________________________________________________________________________________________________
          Anta att när den inre loopen utförts, gäller att Xi = Minumum{xi, x(i+1), ... xn}
	  
          Följande invariant gäller för loopen:
	  1 <= m <= i: Xm = Minimum{xi,x(i+1), ...xn}
          x1 < x2 < ... < x(i-1), x(i-1) < xk, där i <= k <= n
          Det är just denna invariant som behöver bevisas för att bevisa loopens riktighet. 
        
	  Anta att följande gäller i början av en ny iteration, efter ett godtyckligt antal iterationer.
          x1/ < x2/ < ... <x(i/-1)/ , x(i/-1)/ < xk / , där i/ <= k <= n
	 
	  Det ska bevisas att påståendet för loopens invariant gäller även i slutet av denna iteration:
          /x1 < /x2 < ... < /x(/i-1),  /x(/i-1) < /xk för /i <= k <= n
	  
          Variablen i ökar med 1, vilket kan beskrivas med följande:
          /x(i/) = xi/ , /i = i/+1
          
	  Variablen i ändras inte i den inre loopen,  När denna loop avslutas gäller att:
	  xm/ = Minumum{x(i/)/, x(i/+1)/, ... xn/}
	  Variablen i ökar med 1 och element på två olika positioner byter plats:
	  /x(i/) = xm/ , /i = i/+1
          Ovanstående innebär i sin tur att:
          /i - 1 = i/ -> /x(/i-1) = /x(i/) <--> /x(/i-1) = xm/
	  
          Eftersom xm/ = Minumum{x(i/)/, x(i/+1)/, ... xn/} och /x(/i -1) = Xm/ 
	  gäller att /x(/i -1) = Minumum{x(/i -1)/, x(/i), ... /xn}, vilket i sin tur innebär 
	  att /x(/i-1) < xk, för /i <= k <= n
          De element som redan
	  Elementen i första "delmängden" ändras inte under iterationen.
	  Därför kan man anta att loopinvarianten även kan skrivas så här i början av
	  passet:
	  /X1 < /X2 < ... < /X(/i - 2) , /X(/i - 2) < /Xk för /i - 1 <= k <= n.
	  
	  Andra delen i påståendet gäller även då k = /i - 1, alltså:
	  /X(/i - 2) < /X(/i -1)  ( Alltså är det föregående talet mindre än nästkommande) 

          Loopen avslutas då i = n, varför loopinvarianten ger:
	  x1 < x2 <...x(n-1), x(n-1) < xn
	  
	  Detta överenstämmer även med algoritmens eftervillkor: 
	  x1 < x2 < ... < xn
          
          
          _________________________________________________________________________________________________________________
          
